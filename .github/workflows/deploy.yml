name: Deploy on Google Cloud Platform

on:
  # workflow_run:
  #   workflows:
  #     - Check repo integrity
  #   branches:
  #     - main
  #   types:
  #     - completed
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clone Cloud utility
        uses: GuillaumeFalourd/clone-github-repo-action@v2.3
        with:
          owner: 'MatteoIorio11'
          repository: 'service-builder'
          branch: 'main'
   
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "./service-builder/.python-version"

      - name: Set up UV
        uses: astral-sh/setup-uv@v5

      - name: Install the Python project using UV
        run: |
          cd service-builder
          uv venv
          uv sync
          cd ..
  
      - name: Authenticate Google Cloud user
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_TOKEN }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Google Cloud Artifact
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GCP_REGION }}-docker.pkg.dev
          username: _json_key
          password: '${{ secrets.GCP_TOKEN }}'

      - name: Set up NodeJS  
        uses: actions/setup-node@v4
        with:
          node-version: '23.10.0'

      - name: Build Docker image for each service and deploy the Docker Image on Google Could Platform
        run: |
          ls -l
          pwd
          services=( "authentication-service,authentication-service,8080" "detection-service,detection-service,8080" "notification-service,notification-service,8080" "sensor-registry,sensor-registry,8080" "api-gateway,api-gateway,8080" )
          echo "[LOGGER] Activating virtual environment"
          source ./service-builder/.venv/bin/activate
          for service_info in "${services[@]}"; do
            IFS=',' read -r service service_name port <<< "${service_info}"
            echo "[LOGGER] Building and Deploying service $service"
            cd $(pwd)/$service
            npm install
            cd ..
            uv run ./service-builder/script.py $(pwd)/$service $service_name $port
          done
          cat ./service-builder/.env


