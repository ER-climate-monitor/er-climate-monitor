openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/google-31f/API/1.0.0
info:
  version: "1.0.0"
  title: API-Gateway
  description: The API for the EatBacon IOT project
paths:
  /v0/api/authentication/user/login:
    post:
      summary: Login for a normal user
      tags:
        - User
      requestBody:
        description: User's information
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  action:
                    type: string
                    description: User's action, in this case 'login'
                    example: 'login'
                  userEmail:
                    type: string
                    description: User's email
                    example: 'napoli98909@gmail.com'
                  userPassword:
                    type: string
                    description: User's password
                    example: 'AVeryStrongPa!ssword1010'
      responses:
        '200':
          description: The user has logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    description: User's email
                    example: 'napoli98909@gmail.com'
                  userToken:
                    type: string
                    description: User's JWT token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
                  userTokenExpiration:
                    type: number
                    description: Token's expiration date
                    example: '1737630945000'
                  userRole:
                    type: string
                    description: User's role, in this case normal
                    example: 'normal'
  /v0/api/authentication/user/admin/login:
    post:
      summary: Login for an admin user
      tags:
        - User
      requestBody:
        description: User's information
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  action:
                    type: string
                    description: User's action, in this case 'login'
                    example: 'login'
                  apiKey:
                    type: string
                  userEmail:
                    type: string
                    description: User's email
                    example: 'napoli98909@gmail.com'
                  userPassword:
                    type: string
                    description: User's password
                    example: 'AVeryStro!ngPassword1010'
      responses:
        '200':
          description: The user has logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    description: User's email
                    example: 'napoli98909@gmail.com'
                  userToken:
                    type: string
                    description: User's token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
                  userTokenExpiration:
                    type: number
                    description: Token's expiration date
                    example: '1737630945000'
                  userRole:
                    type: string
                    description: User's role, in this case normal
                    example: 'admin'
        '401':
          description: The user has forgot the apikey or the apikey is invalid
  /v0/api/authentication/user/register:
    post:
      summary: New user registration
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  description: User's action
                  example: 'register'
                userEmail:
                  type: string
                  description: User's email
                  example: 'gatteoMare98909@gmail.com'
                userPassword:
                  type: string
                  description: User's password
                  example: Averystrongpassword1121!
      responses:
        '201':
          description: User correctly registered inside the system
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    description: User's input email
                    example: 'gatteoMare98909@gmail.com'
                  userToken:
                    type: string
                    description: User's token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
                  userTokenExpiration:
                    type: number
                    description: Token's expiration date
                    example: '1737630945000'
                  userRole:
                    type: string
                    description: User's role, in this case normal
                    example: 'normal'
        '409':
          description: There is a conflict inside the system. It is possible that another user has the same email
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR_FIELD:
                    type: string
                    description: Error's message
                    example: 'Error, the current email is already in use.'
  /v0/api/authentication/user/delete:
    delete:
      summary: Remove a registered user
      tags:
        - User
      parameters:
        - in: query
          name: userEmail
          required: true
          description: User's email
          schema:
            type: string
            example: 'gatteoMare98909@gmail.com'
        - in: header
          name: x-user-token
          required: true
          description: User's token
          schema:
            type: string
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
      responses:
        '200':
          description: The input user has been correctly removed
        '400':
          description: The input user does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR_FIELD:
                    type: string
                    description: Error's message
                    example: 'The input user does not exist.'
  /v0/api/sensor/register:
    post:
      summary: Add a new Sensor
      tags:
        - Sensor
      parameters:
        - in : header
          name: x-user-token
          required: true
          description: A valid user token
          schema:
            type: string
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sensorIp:
                  type: string
                  description: Sensor's ip
                  example: '1.1.0.20'
                sensorPort:
                  type: number
                  description: Sensor's port
                  minimum: 0
                  maximum: 65535
                  example: 100
                sensorName:
                  type: string
                  description: Sensor's name
                  example: 'Gambettola Water Sensor'
      responses:
        '201':
          description: The Sensor has been registered correctly
        '401':
          description: The User is not authorized.
  /v0/api/sensor/all:
    get:
      summary: Get all the different sensors
      tags:
        - Sensor
      parameters:
        - in: header
          required: true
          name: x-user-token
          description: User's token
          schema:
            type: string
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
      responses:
        '200':
          description: Everything went well, the server has returned a list with all the different sensors
          content:
            application/json:
              schema:
                type: object
                properties:
                  sensors:
                    type: array
                    items:
                      type: object
                      properties:
                        ip:
                          type: string
                          format: ip
                          description: A sensor's ip
                          example: '10.9.3.4'
                        port:
                          type: integer
                          description: The port number used by the sensor.
                          example: 1926
                        name:
                          type: string
                          description: The name of the sensor.
                          example: "diomerda"
                        type:
                          type: string
                          description: The type of the sensor.
                          example: "rain"
                        queries:
                          type: array
                          items:
                            type: string
                            description: A query related to the sensor.
                            example: "25%-threshold"
                example:
                  sensors:
                    - ip: "30.0.0.100"
                      port: 1926
                      name: "gatteo-mare-sensor"
                      type: "rain"
                      queries:
                        - "25%-threshold"
                        - "50%-threshold"
                        - "75%-threshold"
                        - "100%-threshold"
                    - ip: "2001:db8:3333:4444:5555:6666:7777:8888"
                      port: 1926
                      name: "napoli-sensor"
                      type: "unknown"
                      queries:
                        - "25%-threshold"
                        - "50%-threshold"
                        - "75%-threshold"
                        - "100%-threshold"
        '401':
          description: The user is not authorized
  /v0/api/sensor/shutdown:
    delete:
      summary: Delete one of the stored sensors
      tags:
        - Sensor
      parameters:
        - in: query
          name: sensorIp
          required: true
          description: Input sensor's ip
          schema:
            type: string
            example: '10.2.3.5'
        - in: query
          name: sensorPort
          required: true
          description: Input sensor's port
          schema:
            type: number
            example: 100
            minimum: 0
            maximum: 65535
        - in: header
          name: x-user-token
          required: true
          description: User's token
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
      responses:
        '200':
          description: The input sensor has been turned off
        '401':
          description: The user is not authorized
        '404':
          description: The input sensor was not found
  /v0/api/sensor/update:
    put:
      tags:
        - Sensor
      summary: Update one of the registered sensors.
      parameters:
        - in: header
          name: x-user-token
          description: User's token
          schema:
            type: string
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzhhNTdhN2VkOWFhZDc3ZjQ4ZGU1YjkiLCJ1c2VyRW1haWwiOiJ0ZXN0ZW1haWw5ODkwOUBnbWFpbC5jb20iLCJ1c2VyUm9sZSI6ImFkbWluIiwiaWF0IjoxNzM3NjI3MzQ1LCJleHAiOjE3Mzc2MzA5NDV9.twmZ7NKAWHNIKOqLHQZ3Rtjiu6ATQKweCI2fL16AIHE'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UpdateNameAction'
                - $ref: '#/components/schemas/UpdateCronjobDays'
                - $ref: '#/components/schemas/UpdateCronjobTime'
              discriminator:
                propertyName: action
                mapping:
                  update-name: '#/components/schemas/UpdateNameAction'
                  update-cronjob-days: '#/components/schemas/UpdateCronjobDays'
                  update-cronjob-time: '#/components/schemas/UpdateCronjobTime'
      responses:
        '200':
          description: Successfully performed the action.
        '401':
          description: The user is not authorized
  /v0/api/alert/subscriptions:
    get:
      summary: Retrieve user's subscriptions
      tags:
        - Subscriptions
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicAddr'
        '400':
          description: Invalid user ID
        '500':
          description: Internal server error

    delete:
      summary: Delete a user's subscription
      tags:
        - Subscriptions
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: topicAddr
          description: "topic string representation of the form `notification.<topic>.<sensorName | * | #>.<query | #>`"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subscription successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription deleted"
        '400':
          description: Invalid parameters
        '404':
          description: Subscription not found
        '500':
          description: Internal server error
    post:
      summary: Create a new user subscription
      tags:
        - Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
      responses:
        '200':
          description: Successful subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        '400':
          description: Subscription error

  /v0/api/alert:ws:
    get:
      summary: WebSocket connection endpoint (the actual endpoint is `/v0/api/alert`)
      tags:
        - Subscriptions
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            type: string
        - in: query
          name: topicAddr
          required: true
          schema:
            type: string
      responses:
        '101':
          description: WebSocket Upgrade Successful
      x-websocket:
        connectionParameters:
          $ref: '#/components/schemas/WebSocketConnectionParams'

  /v0/api/alert:
    get:
      summary: Get alert list for input user
      tags:
        - Subscriptions
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of all users alerts to which he subscribed to.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationAlert'

components:
  schemas:
    BaseRequest:
      type: object
      required:
        - sensorIp
        - sensorPort
        - action
      properties:
        sensorIp:
          type: string
          description: Sensor's Ip
          example: "10.9.93.9"
        sensorPort:
          type: number
          description: Sensor's Port
          example: 1926
        action:
          type: string
          description: Specifies the action type.
          example: "update-name"

    UpdateNameAction:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            sensorName:
              type: string
              description: The name of the sensor for action update-name.
              example: "TemperatureSensor"

    UpdateCronjobDays:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            sensorCronJobDays:
              type: string
              description: New Cronjob days in the format dd-dd where dd is in [0, 6]
              example: "0-5"

    UpdateCronjobTime:
      allOf:
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            sensorCronJobTimeHour:
              type: string
              description: New cronjob hour in the interval [0, 23]
              example: "23"
            sensorCronJobTimeMinute:
              type: string
              description: New cronjob minute in the interval [0, 59]
    TopicAddr:
      type: string
      example: "notification.<topic>.<sensorName | * | #>.<query | #>"

    SubscriptionRequest:
      type: object
      required:
        - userId
        - topic
      properties:
        userId:
          type: string
          example: "user123"
        topic:
          $ref: '#/components/schemas/SubscriptionTopic'
    
    SubscriptionTopic:
      type: object
      required:
        - topic
      properties:
        topic:
          type: string
          example: "temperature"
        sensorName:
          type: string
          example: "gambettola-temp"
        query:
          type: string
          example: "threshold-25%"

    SubscriptionResponse:
      type: object
      properties:
        uid:
          type: string
          example: "c2a044be-f73b-4788-8532-3130aee9bcb7"
        topicAddr:
          type: string
          example: "temperature.gambettola-temp.threshold-25%"

    WebSocketConnectionParams:
      type: object
      required:
        - uid
        - topicAddr
      properties:
        uid:
          type: string
          description: User's unique identifier
        topicAddr:
          type: string
          description: Topic to subscribe to

    NotificationAlert:
      type: object
      properties:
        id:
          type: string
          example: '65a1b2c3d4e5f6g7h8i9j0k'
        sensorName:
          type: string
          example: 'gambettola-river'
        type:
          type: string
          example: 'water'
        value:
          type: number
          example: 10.2
        unit:
          type: string
          example: 'm'
        timestamp:
          type: number
          example: 1223123
        query:
          type: object
          example: { value: 10.0, name: 'theshold-25%' }

tags:
  - name: Sensor
    description: Here are grouped all the possible operations available for interacting with all the stored sensors. In order to perform any of the following operations, the user must be logged in as an admin. If the user is logged in as
                  a normal user, then he will always receive a 401 response from the server.
  - name: User
    description: Here are grouped all the different apis regarding the User. More in particular here are listed the most impportant operations a user can do.